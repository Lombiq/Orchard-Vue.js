@using GraphQL
@using Lombiq.VueJs.Models
@using OrchardCore.Mvc.Utilities
@{
    VueComponentApp shapeModel = Model.ShapeModel;

    var dependsOn = "vuejs," + shapeModel.ComponentName;

    var arguments = shapeModel
        .ViewModel
        .Properties()
        .Select(property => property.Name)
        .ToList();

    var vModel = string.Empty;
    if (arguments.Contains(shapeModel.ModelProperty))
    {
        vModel = $"v-model=\"{shapeModel.ModelProperty}\"";
        arguments.Remove(shapeModel.ModelProperty);
    }

    var attributes = string.Join(" ", arguments.Select(name => $":{name.HtmlClassify()}=\"{name.ToCamelCase()}\""));
}

<div id="@shapeModel.Id"
     class="@shapeModel.Class lombiq-vue"
     data-name="@shapeModel.ComponentName"
     @Json.DataAttribute("model", shapeModel.ComponentName)>
    @Html.Raw($"<{shapeModel.ComponentName} {attributes} {vModel}></{shapeModel.ComponentName}>")
</div>

<script at="Foot" asp-name="Lombiq.VueJs.VueComponentApp.Script" depends-on="@dependsOn">
(function() {
    document.querySelectorAll('.lombiq-vue').forEach((element) => {
        const componentName = element.getAttribute('data-name');
        const data = JSON.parse(element.getAttribute('data-model'));

        if (!('applications' in Vue)) Vue.applications = { };
        if (!Array.isArray(Vue.applications[componentName])) Vue.applications[componentName] = [ ];

        const app = new Vue({
            el: element,
            data: data,
        });
        app.$appId = element.id;
        Vue.applications[componentName].push(app);
    });
})();
</script>
