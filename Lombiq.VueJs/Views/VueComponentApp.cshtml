@using GraphQL
@using Lombiq.VueJs.Models
@using OrchardCore.Mvc.Utilities
@{
    VueComponentApp shapeModel = Model.ShapeModel;

    var dependsOn = "vuejs," + shapeModel.ComponentName;
    var aspName = shapeModel.Id + "-VueApp";

    var arguments = shapeModel
        .ViewModel
        .Properties()
        .Select(property => property.Name)
        .ToList();

    var vModel = string.Empty;
    if (arguments.Contains(shapeModel.ModelProperty))
    {
        vModel = $"v-model=\"{shapeModel.ModelProperty}\"";
        arguments.Remove(shapeModel.ModelProperty);
    }

    var attributes = string.Join(" ", arguments.Select(name => $":{name.HtmlClassify()}=\"{name.ToCamelCase()}\""));
}

<div id="@shapeModel.Id" class="@shapeModel.Class">
    @Html.Raw($"<{shapeModel.ComponentName} {attributes} {vModel}></{shapeModel.ComponentName}>")
</div>

<script at="Foot" depends-on="@dependsOn" asp-name="@aspName">
(function() {
    const appId = @shapeModel.Id.JsonHtmlContent();
    const componentName = @shapeModel.ComponentName.JsonHtmlContent();
    const data = @Json.Serialize(shapeModel.ViewModel);

    if (!('applications' in Vue)) Vue.applications = { };
    if (!Array.isArray(Vue.applications[componentName])) Vue.applications[componentName] = [ ];

    const app = new Vue({
        el: '#' + appId,
        data: data,
    });
    app.$appId = appId;
    Vue.applications[componentName].push(app);
})();
</script>
