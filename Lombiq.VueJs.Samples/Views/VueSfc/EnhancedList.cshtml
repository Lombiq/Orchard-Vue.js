@model Lombiq.VueJs.Samples.ViewModels.EnhancedListViewModel

@{
    var dependencies = string.Join(", ", new string[]
    {
        ResourceNames.EnhancementControl,
        ResourceNames.EnhancementTableBody,
    });
}

<form id="enhanced-list">
    <fieldset id="controls">
        <input type="number" name="page" value="@Model.Page" min="1" max="10"/>
        <input type="submit" value="@T["Update"]"/>
    </fieldset>

    <div>
        Some other stuff that Vue doesn't care about. You can put your shapes or anythis that the browser should
        continue treating as static HTML into the Vue.js webapp. It won't be bothered. On the other hand, don't place
        unrelated apps, jQuery-modified content, etc inside a Vue.js app, becuase its virtual DOM might update and reset
        your changes.
    </div>

    @* We use a table for simplicity's sake, but this could be anything else too including an iframe with dynamic src. *@
    <table class="table">
        <thead>
            <tr>
                <th scope="col">@T["Number"]</th>
                <th scope="col">@T["Date"]</th>
                <th scope="col">@T["Day"]</th>
                <th scope="col">@T["Score"]</th>
            </tr>
        </thead>
        <tbody id="table-body">
            @foreach (var row in Model.Data)
            {
                <tr>
                    <td>@row.Number</td>
                    <td>@row.Date</td>
                    <td>@row.Day</td>
                    <td>@row.Random</td>
                </tr>
            }
        </tbody>
    </table>
</form>

<vue-component area="@FeatureIds.Area" name="@ResourceNames.EnhancementControl" />
<vue-component area="@FeatureIds.Area" name="@ResourceNames.EnhancementTableBody" />

@* Here we replace the enhanced elements with vue components using vanilla Javascript. *@
<script at="Foot" depends-on="@dependencies">
    // If you have a wrapper.
    document.getElementById('controls').innerHTML = '<enhancement-control v-model="page" :max="10">';

    // If you need to replace an element.
    const tableBody = document.createElement(@ResourceNames.EnhancementTableBody.JsonHtmlContent());
    tableBody.setAttribute(':data', 'data');
    document.getElementById('table-body').replaceWith(tableBody);

    // Vue.js app with very light business logic. In general try to move as much of the code into the SFCs as feasible.
    const url = @(Orchard.Action<VueSfcController>(controller => controller.GetList(999)).JsonHtmlContent());
    window.app = new Vue({
        el: '#enhanced-list',
        data: @Json.Serialize(new { Model.Page, Model.Data }),
        watch: {
            page: function (page) {
                const self = this;
                fetch(url.replace('999', page))
                    .then((response) => response.json())
                    .then((data) => {
                        self.data = data;
                        history.replaceState(undefined, undefined, '?page=' + page)
                    });
            },
        },
    });
</script>

@* Another approach (if you want to completely replace the entire app surface) is to introduce a top level SFC and make
   that component element the only thing in the template. We didn't make such an SFC now, but the below snippet should
   covey the idea if that's the path you want to take.

<script at="Foot" depends-on="@dependencies">
    window.app = new Vue({
        el: '#enhanced-list',
        data: @Json.Serialize(new { Page = Model.Page, Data = Model.Data }),
        template: '@ResourceNames.EnhancementMain :page="page" :data="data" @@input="page = $event.page; data = $event.data;" />',
    });
</script>
 *@

@* NEXT STATION: Assets/Scripts/VueComponents/enhancement-control.vue *@
